import { __assign } from "tslib";
/**
 * @private
 */
export var waiterServiceDefaults = {
    minDelay: 2,
    maxDelay: 120,
};
export var WaiterState;
(function (WaiterState) {
    WaiterState["ABORTED"] = "ABORTED";
    WaiterState["FAILURE"] = "FAILURE";
    WaiterState["SUCCESS"] = "SUCCESS";
    WaiterState["RETRY"] = "RETRY";
    WaiterState["TIMEOUT"] = "TIMEOUT";
})(WaiterState || (WaiterState = {}));
/**
 * Handles and throws exceptions resulting from the waiterResult
 * @param result WaiterResult
 */
export var checkExceptions = function (result) {
    if (result.state === WaiterState.ABORTED) {
        var abortError = new Error("" + JSON.stringify(__assign(__assign({}, result), { reason: "Request was aborted" })));
        abortError.name = "AbortError";
        throw abortError;
    }
    else if (result.state === WaiterState.TIMEOUT) {
        var timeoutError = new Error("" + JSON.stringify(__assign(__assign({}, result), { reason: "Waiter has timed out" })));
        timeoutError.name = "TimeoutError";
        throw timeoutError;
    }
    else if (result.state !== WaiterState.SUCCESS) {
        throw new Error("" + JSON.stringify({ result: result }));
    }
    return result;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FpdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3dhaXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBSUE7O0dBRUc7QUFDSCxNQUFNLENBQUMsSUFBTSxxQkFBcUIsR0FBRztJQUNuQyxRQUFRLEVBQUUsQ0FBQztJQUNYLFFBQVEsRUFBRSxHQUFHO0NBQ2QsQ0FBQztBQVFGLE1BQU0sQ0FBTixJQUFZLFdBTVg7QUFORCxXQUFZLFdBQVc7SUFDckIsa0NBQW1CLENBQUE7SUFDbkIsa0NBQW1CLENBQUE7SUFDbkIsa0NBQW1CLENBQUE7SUFDbkIsOEJBQWUsQ0FBQTtJQUNmLGtDQUFtQixDQUFBO0FBQ3JCLENBQUMsRUFOVyxXQUFXLEtBQVgsV0FBVyxRQU10QjtBQVdEOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxJQUFNLGVBQWUsR0FBRyxVQUFDLE1BQW9CO0lBQ2xELElBQUksTUFBTSxDQUFDLEtBQUssS0FBSyxXQUFXLENBQUMsT0FBTyxFQUFFO1FBQ3hDLElBQU0sVUFBVSxHQUFHLElBQUksS0FBSyxDQUMxQixLQUFHLElBQUksQ0FBQyxTQUFTLHVCQUNaLE1BQU0sS0FDVCxNQUFNLEVBQUUscUJBQXFCLElBQzNCLENBQ0wsQ0FBQztRQUNGLFVBQVUsQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDO1FBQy9CLE1BQU0sVUFBVSxDQUFDO0tBQ2xCO1NBQU0sSUFBSSxNQUFNLENBQUMsS0FBSyxLQUFLLFdBQVcsQ0FBQyxPQUFPLEVBQUU7UUFDL0MsSUFBTSxZQUFZLEdBQUcsSUFBSSxLQUFLLENBQzVCLEtBQUcsSUFBSSxDQUFDLFNBQVMsdUJBQ1osTUFBTSxLQUNULE1BQU0sRUFBRSxzQkFBc0IsSUFDNUIsQ0FDTCxDQUFDO1FBQ0YsWUFBWSxDQUFDLElBQUksR0FBRyxjQUFjLENBQUM7UUFDbkMsTUFBTSxZQUFZLENBQUM7S0FDcEI7U0FBTSxJQUFJLE1BQU0sQ0FBQyxLQUFLLEtBQUssV0FBVyxDQUFDLE9BQU8sRUFBRTtRQUMvQyxNQUFNLElBQUksS0FBSyxDQUFDLEtBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sUUFBQSxFQUFFLENBQUcsQ0FBQyxDQUFDO0tBQ2xEO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV2FpdGVyQ29uZmlndXJhdGlvbiBhcyBXYWl0ZXJDb25maWd1cmF0aW9uX18gfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBXYWl0ZXJDb25maWd1cmF0aW9uPFQ+IGV4dGVuZHMgV2FpdGVyQ29uZmlndXJhdGlvbl9fPFQ+IHt9XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IHdhaXRlclNlcnZpY2VEZWZhdWx0cyA9IHtcbiAgbWluRGVsYXk6IDIsXG4gIG1heERlbGF5OiAxMjAsXG59O1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCB0eXBlIFdhaXRlck9wdGlvbnM8Q2xpZW50PiA9IFdhaXRlckNvbmZpZ3VyYXRpb248Q2xpZW50PiAmXG4gIFJlcXVpcmVkPFBpY2s8V2FpdGVyQ29uZmlndXJhdGlvbjxDbGllbnQ+LCBcIm1pbkRlbGF5XCIgfCBcIm1heERlbGF5XCI+PjtcblxuZXhwb3J0IGVudW0gV2FpdGVyU3RhdGUge1xuICBBQk9SVEVEID0gXCJBQk9SVEVEXCIsXG4gIEZBSUxVUkUgPSBcIkZBSUxVUkVcIixcbiAgU1VDQ0VTUyA9IFwiU1VDQ0VTU1wiLFxuICBSRVRSWSA9IFwiUkVUUllcIixcbiAgVElNRU9VVCA9IFwiVElNRU9VVFwiLFxufVxuXG5leHBvcnQgdHlwZSBXYWl0ZXJSZXN1bHQgPSB7XG4gIHN0YXRlOiBXYWl0ZXJTdGF0ZTtcblxuICAvKipcbiAgICogKG9wdGlvbmFsKSBJbmRpY2F0ZXMgYSByZWFzb24gZm9yIHdoeSBhIHdhaXRlciBoYXMgcmVhY2hlZCBpdHMgc3RhdGUuXG4gICAqL1xuICByZWFzb24/OiBhbnk7XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgYW5kIHRocm93cyBleGNlcHRpb25zIHJlc3VsdGluZyBmcm9tIHRoZSB3YWl0ZXJSZXN1bHRcbiAqIEBwYXJhbSByZXN1bHQgV2FpdGVyUmVzdWx0XG4gKi9cbmV4cG9ydCBjb25zdCBjaGVja0V4Y2VwdGlvbnMgPSAocmVzdWx0OiBXYWl0ZXJSZXN1bHQpOiBXYWl0ZXJSZXN1bHQgPT4ge1xuICBpZiAocmVzdWx0LnN0YXRlID09PSBXYWl0ZXJTdGF0ZS5BQk9SVEVEKSB7XG4gICAgY29uc3QgYWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiAgICAgIGAke0pTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICByZWFzb246IFwiUmVxdWVzdCB3YXMgYWJvcnRlZFwiLFxuICAgICAgfSl9YFxuICAgICk7XG4gICAgYWJvcnRFcnJvci5uYW1lID0gXCJBYm9ydEVycm9yXCI7XG4gICAgdGhyb3cgYWJvcnRFcnJvcjtcbiAgfSBlbHNlIGlmIChyZXN1bHQuc3RhdGUgPT09IFdhaXRlclN0YXRlLlRJTUVPVVQpIHtcbiAgICBjb25zdCB0aW1lb3V0RXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICBgJHtKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgcmVhc29uOiBcIldhaXRlciBoYXMgdGltZWQgb3V0XCIsXG4gICAgICB9KX1gXG4gICAgKTtcbiAgICB0aW1lb3V0RXJyb3IubmFtZSA9IFwiVGltZW91dEVycm9yXCI7XG4gICAgdGhyb3cgdGltZW91dEVycm9yO1xuICB9IGVsc2UgaWYgKHJlc3VsdC5zdGF0ZSAhPT0gV2FpdGVyU3RhdGUuU1VDQ0VTUykge1xuICAgIHRocm93IG5ldyBFcnJvcihgJHtKU09OLnN0cmluZ2lmeSh7IHJlc3VsdCB9KX1gKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiJdfQ==