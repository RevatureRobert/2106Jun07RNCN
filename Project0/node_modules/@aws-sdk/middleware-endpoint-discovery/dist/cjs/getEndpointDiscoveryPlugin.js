"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEndpointDiscoveryOptionalPlugin = exports.getEndpointDiscoveryRequiredPlugin = exports.getEndpointDiscoveryPlugin = exports.endpointDiscoveryMiddlewareOptions = void 0;
const endpointDiscoveryMiddleware_1 = require("./endpointDiscoveryMiddleware");
exports.endpointDiscoveryMiddlewareOptions = {
    name: "endpointDiscoveryMiddleware",
    step: "build",
    tags: ["ENDPOINT_DISCOVERY"],
    override: true,
};
const getEndpointDiscoveryPlugin = (pluginConfig, middlewareConfig) => ({
    applyToStack: (commandStack) => {
        commandStack.add(endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware(pluginConfig, middlewareConfig), exports.endpointDiscoveryMiddlewareOptions);
    },
});
exports.getEndpointDiscoveryPlugin = getEndpointDiscoveryPlugin;
const getEndpointDiscoveryRequiredPlugin = (pluginConfig, middlewareConfig) => ({
    applyToStack: (commandStack) => {
        commandStack.add(endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware(pluginConfig, { ...middlewareConfig, isDiscoveredEndpointRequired: true }), exports.endpointDiscoveryMiddlewareOptions);
    },
});
exports.getEndpointDiscoveryRequiredPlugin = getEndpointDiscoveryRequiredPlugin;
const getEndpointDiscoveryOptionalPlugin = (pluginConfig, middlewareConfig) => ({
    applyToStack: (commandStack) => {
        commandStack.add(endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware(pluginConfig, { ...middlewareConfig, isDiscoveredEndpointRequired: false }), exports.endpointDiscoveryMiddlewareOptions);
    },
});
exports.getEndpointDiscoveryOptionalPlugin = getEndpointDiscoveryOptionalPlugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0RW5kcG9pbnREaXNjb3ZlcnlQbHVnaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2V0RW5kcG9pbnREaXNjb3ZlcnlQbHVnaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsK0VBQTRFO0FBRy9ELFFBQUEsa0NBQWtDLEdBQXdCO0lBQ3JFLElBQUksRUFBRSw2QkFBNkI7SUFDbkMsSUFBSSxFQUFFLE9BQU87SUFDYixJQUFJLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztJQUM1QixRQUFRLEVBQUUsSUFBSTtDQUNmLENBQUM7QUFTSyxNQUFNLDBCQUEwQixHQUFHLENBQ3hDLFlBQWtFLEVBQ2xFLGdCQUFtRCxFQUM5QixFQUFFLENBQUMsQ0FBQztJQUN6QixZQUFZLEVBQUUsQ0FBQyxZQUFZLEVBQUUsRUFBRTtRQUM3QixZQUFZLENBQUMsR0FBRyxDQUFDLHlEQUEyQixDQUFDLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLDBDQUFrQyxDQUFDLENBQUM7SUFDcEgsQ0FBQztDQUNGLENBQUMsQ0FBQztBQVBVLFFBQUEsMEJBQTBCLDhCQU9wQztBQUVJLE1BQU0sa0NBQWtDLEdBQUcsQ0FDaEQsWUFBa0UsRUFDbEUsZ0JBQXlGLEVBQ3BFLEVBQUUsQ0FBQyxDQUFDO0lBQ3pCLFlBQVksRUFBRSxDQUFDLFlBQVksRUFBRSxFQUFFO1FBQzdCLFlBQVksQ0FBQyxHQUFHLENBQ2QseURBQTJCLENBQUMsWUFBWSxFQUFFLEVBQUUsR0FBRyxnQkFBZ0IsRUFBRSw0QkFBNEIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUN0RywwQ0FBa0MsQ0FDbkMsQ0FBQztJQUNKLENBQUM7Q0FDRixDQUFDLENBQUM7QUFWVSxRQUFBLGtDQUFrQyxzQ0FVNUM7QUFFSSxNQUFNLGtDQUFrQyxHQUFHLENBQ2hELFlBQWtFLEVBQ2xFLGdCQUF5RixFQUNwRSxFQUFFLENBQUMsQ0FBQztJQUN6QixZQUFZLEVBQUUsQ0FBQyxZQUFZLEVBQUUsRUFBRTtRQUM3QixZQUFZLENBQUMsR0FBRyxDQUNkLHlEQUEyQixDQUFDLFlBQVksRUFBRSxFQUFFLEdBQUcsZ0JBQWdCLEVBQUUsNEJBQTRCLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFDdkcsMENBQWtDLENBQ25DLENBQUM7SUFDSixDQUFDO0NBQ0YsQ0FBQyxDQUFDO0FBVlUsUUFBQSxrQ0FBa0Msc0NBVTVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVpbGRIYW5kbGVyT3B0aW9ucywgSHR0cEhhbmRsZXJPcHRpb25zLCBNaWRkbGV3YXJlU3RhY2ssIFBsdWdnYWJsZSB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG5pbXBvcnQgeyBlbmRwb2ludERpc2NvdmVyeU1pZGRsZXdhcmUgfSBmcm9tIFwiLi9lbmRwb2ludERpc2NvdmVyeU1pZGRsZXdhcmVcIjtcbmltcG9ydCB7IEVuZHBvaW50RGlzY292ZXJ5UmVzb2x2ZWRDb25maWcsIFByZXZpb3VzbHlSZXNvbHZlZCB9IGZyb20gXCIuL3Jlc29sdmVFbmRwb2ludERpc2NvdmVyeUNvbmZpZ1wiO1xuXG5leHBvcnQgY29uc3QgZW5kcG9pbnREaXNjb3ZlcnlNaWRkbGV3YXJlT3B0aW9uczogQnVpbGRIYW5kbGVyT3B0aW9ucyA9IHtcbiAgbmFtZTogXCJlbmRwb2ludERpc2NvdmVyeU1pZGRsZXdhcmVcIixcbiAgc3RlcDogXCJidWlsZFwiLFxuICB0YWdzOiBbXCJFTkRQT0lOVF9ESVNDT1ZFUllcIl0sXG4gIG92ZXJyaWRlOiB0cnVlLFxufTtcblxuZXhwb3J0IGludGVyZmFjZSBFbmRwb2ludERpc2NvdmVyeU1pZGRsZXdhcmVDb25maWcge1xuICBpc0Rpc2NvdmVyZWRFbmRwb2ludFJlcXVpcmVkOiBib29sZWFuO1xuICBjbGllbnRTdGFjazogTWlkZGxld2FyZVN0YWNrPGFueSwgYW55PjtcbiAgb3B0aW9ucz86IEh0dHBIYW5kbGVyT3B0aW9ucztcbiAgaWRlbnRpZmllcnM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xufVxuXG5leHBvcnQgY29uc3QgZ2V0RW5kcG9pbnREaXNjb3ZlcnlQbHVnaW4gPSAoXG4gIHBsdWdpbkNvbmZpZzogRW5kcG9pbnREaXNjb3ZlcnlSZXNvbHZlZENvbmZpZyAmIFByZXZpb3VzbHlSZXNvbHZlZCxcbiAgbWlkZGxld2FyZUNvbmZpZzogRW5kcG9pbnREaXNjb3ZlcnlNaWRkbGV3YXJlQ29uZmlnXG4pOiBQbHVnZ2FibGU8YW55LCBhbnk+ID0+ICh7XG4gIGFwcGx5VG9TdGFjazogKGNvbW1hbmRTdGFjaykgPT4ge1xuICAgIGNvbW1hbmRTdGFjay5hZGQoZW5kcG9pbnREaXNjb3ZlcnlNaWRkbGV3YXJlKHBsdWdpbkNvbmZpZywgbWlkZGxld2FyZUNvbmZpZyksIGVuZHBvaW50RGlzY292ZXJ5TWlkZGxld2FyZU9wdGlvbnMpO1xuICB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCBnZXRFbmRwb2ludERpc2NvdmVyeVJlcXVpcmVkUGx1Z2luID0gKFxuICBwbHVnaW5Db25maWc6IEVuZHBvaW50RGlzY292ZXJ5UmVzb2x2ZWRDb25maWcgJiBQcmV2aW91c2x5UmVzb2x2ZWQsXG4gIG1pZGRsZXdhcmVDb25maWc6IE9taXQ8RW5kcG9pbnREaXNjb3ZlcnlNaWRkbGV3YXJlQ29uZmlnLCBcImlzRGlzY292ZXJlZEVuZHBvaW50UmVxdWlyZWRcIj5cbik6IFBsdWdnYWJsZTxhbnksIGFueT4gPT4gKHtcbiAgYXBwbHlUb1N0YWNrOiAoY29tbWFuZFN0YWNrKSA9PiB7XG4gICAgY29tbWFuZFN0YWNrLmFkZChcbiAgICAgIGVuZHBvaW50RGlzY292ZXJ5TWlkZGxld2FyZShwbHVnaW5Db25maWcsIHsgLi4ubWlkZGxld2FyZUNvbmZpZywgaXNEaXNjb3ZlcmVkRW5kcG9pbnRSZXF1aXJlZDogdHJ1ZSB9KSxcbiAgICAgIGVuZHBvaW50RGlzY292ZXJ5TWlkZGxld2FyZU9wdGlvbnNcbiAgICApO1xuICB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCBnZXRFbmRwb2ludERpc2NvdmVyeU9wdGlvbmFsUGx1Z2luID0gKFxuICBwbHVnaW5Db25maWc6IEVuZHBvaW50RGlzY292ZXJ5UmVzb2x2ZWRDb25maWcgJiBQcmV2aW91c2x5UmVzb2x2ZWQsXG4gIG1pZGRsZXdhcmVDb25maWc6IE9taXQ8RW5kcG9pbnREaXNjb3ZlcnlNaWRkbGV3YXJlQ29uZmlnLCBcImlzRGlzY292ZXJlZEVuZHBvaW50UmVxdWlyZWRcIj5cbik6IFBsdWdnYWJsZTxhbnksIGFueT4gPT4gKHtcbiAgYXBwbHlUb1N0YWNrOiAoY29tbWFuZFN0YWNrKSA9PiB7XG4gICAgY29tbWFuZFN0YWNrLmFkZChcbiAgICAgIGVuZHBvaW50RGlzY292ZXJ5TWlkZGxld2FyZShwbHVnaW5Db25maWcsIHsgLi4ubWlkZGxld2FyZUNvbmZpZywgaXNEaXNjb3ZlcmVkRW5kcG9pbnRSZXF1aXJlZDogZmFsc2UgfSksXG4gICAgICBlbmRwb2ludERpc2NvdmVyeU1pZGRsZXdhcmVPcHRpb25zXG4gICAgKTtcbiAgfSxcbn0pO1xuIl19