"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS = void 0;
const ENV_ENDPOINT_DISCOVERY = ["AWS_ENABLE_ENDPOINT_DISCOVERY", "AWS_ENDPOINT_DISCOVERY_ENABLED"];
const CONFIG_ENDPOINT_DISCOVERY = "endpoint_discovery_enabled";
const isFalsy = (value) => ["false", "0"].indexOf(value) >= 0;
exports.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => {
        for (let i = 0; i < ENV_ENDPOINT_DISCOVERY.length; i++) {
            const envKey = ENV_ENDPOINT_DISCOVERY[i];
            if (envKey in env) {
                const value = env[envKey];
                if (value === "") {
                    throw Error(`Environment variable ${envKey} can't be empty of undefined, got "${value}"`);
                }
                // @ts-ignore Argument of type 'string | undefined' is not assignable to parameter of type 'string'
                return !isFalsy(value);
            }
        }
    },
    configFileSelector: (profile) => {
        if (CONFIG_ENDPOINT_DISCOVERY in profile) {
            const value = profile[CONFIG_ENDPOINT_DISCOVERY];
            if (value === undefined) {
                throw Error(`Shared config entry ${CONFIG_ENDPOINT_DISCOVERY} can't be undefined, got "${value}"`);
            }
            return !isFalsy(value);
        }
    },
    default: undefined,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlndXJhdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLCtCQUErQixFQUFFLGdDQUFnQyxDQUFDLENBQUM7QUFDbkcsTUFBTSx5QkFBeUIsR0FBRyw0QkFBNEIsQ0FBQztBQUUvRCxNQUFNLE9BQU8sR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUV6RCxRQUFBLHNDQUFzQyxHQUErQztJQUNoRywyQkFBMkIsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQ25DLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDdEQsTUFBTSxNQUFNLEdBQUcsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekMsSUFBSSxNQUFNLElBQUksR0FBRyxFQUFFO2dCQUNqQixNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQzFCLElBQUksS0FBSyxLQUFLLEVBQUUsRUFBRTtvQkFDaEIsTUFBTSxLQUFLLENBQUMsd0JBQXdCLE1BQU0sc0NBQXNDLEtBQUssR0FBRyxDQUFDLENBQUM7aUJBQzNGO2dCQUNELG1HQUFtRztnQkFDbkcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN4QjtTQUNGO0lBQ0gsQ0FBQztJQUNELGtCQUFrQixFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDOUIsSUFBSSx5QkFBeUIsSUFBSSxPQUFPLEVBQUU7WUFDeEMsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDakQsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO2dCQUN2QixNQUFNLEtBQUssQ0FBQyx1QkFBdUIseUJBQXlCLDZCQUE2QixLQUFLLEdBQUcsQ0FBQyxDQUFDO2FBQ3BHO1lBQ0QsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN4QjtJQUNILENBQUM7SUFDRCxPQUFPLEVBQUUsU0FBUztDQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9hZGVkQ29uZmlnU2VsZWN0b3JzIH0gZnJvbSBcIkBhd3Mtc2RrL25vZGUtY29uZmlnLXByb3ZpZGVyXCI7XG5cbmNvbnN0IEVOVl9FTkRQT0lOVF9ESVNDT1ZFUlkgPSBbXCJBV1NfRU5BQkxFX0VORFBPSU5UX0RJU0NPVkVSWVwiLCBcIkFXU19FTkRQT0lOVF9ESVNDT1ZFUllfRU5BQkxFRFwiXTtcbmNvbnN0IENPTkZJR19FTkRQT0lOVF9ESVNDT1ZFUlkgPSBcImVuZHBvaW50X2Rpc2NvdmVyeV9lbmFibGVkXCI7XG5cbmNvbnN0IGlzRmFsc3kgPSAodmFsdWU6IHN0cmluZykgPT4gW1wiZmFsc2VcIiwgXCIwXCJdLmluZGV4T2YodmFsdWUpID49IDA7XG5cbmV4cG9ydCBjb25zdCBOT0RFX0VORFBPSU5UX0RJU0NPVkVSWV9DT05GSUdfT1BUSU9OUzogTG9hZGVkQ29uZmlnU2VsZWN0b3JzPGJvb2xlYW4gfCB1bmRlZmluZWQ+ID0ge1xuICBlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3I6IChlbnYpID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IEVOVl9FTkRQT0lOVF9ESVNDT1ZFUlkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGVudktleSA9IEVOVl9FTkRQT0lOVF9ESVNDT1ZFUllbaV07XG4gICAgICBpZiAoZW52S2V5IGluIGVudikge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGVudltlbnZLZXldO1xuICAgICAgICBpZiAodmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICB0aHJvdyBFcnJvcihgRW52aXJvbm1lbnQgdmFyaWFibGUgJHtlbnZLZXl9IGNhbid0IGJlIGVtcHR5IG9mIHVuZGVmaW5lZCwgZ290IFwiJHt2YWx1ZX1cImApO1xuICAgICAgICB9XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgQXJndW1lbnQgb2YgdHlwZSAnc3RyaW5nIHwgdW5kZWZpbmVkJyBpcyBub3QgYXNzaWduYWJsZSB0byBwYXJhbWV0ZXIgb2YgdHlwZSAnc3RyaW5nJ1xuICAgICAgICByZXR1cm4gIWlzRmFsc3kodmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgY29uZmlnRmlsZVNlbGVjdG9yOiAocHJvZmlsZSkgPT4ge1xuICAgIGlmIChDT05GSUdfRU5EUE9JTlRfRElTQ09WRVJZIGluIHByb2ZpbGUpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gcHJvZmlsZVtDT05GSUdfRU5EUE9JTlRfRElTQ09WRVJZXTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IEVycm9yKGBTaGFyZWQgY29uZmlnIGVudHJ5ICR7Q09ORklHX0VORFBPSU5UX0RJU0NPVkVSWX0gY2FuJ3QgYmUgdW5kZWZpbmVkLCBnb3QgXCIke3ZhbHVlfVwiYCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gIWlzRmFsc3kodmFsdWUpO1xuICAgIH1cbiAgfSxcbiAgZGVmYXVsdDogdW5kZWZpbmVkLFxufTtcbiJdfQ==