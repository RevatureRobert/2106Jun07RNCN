import { ProviderError } from "@aws-sdk/property-provider";
export var fromWebToken = function (init) {
    return function () {
        var roleArn = init.roleArn, roleSessionName = init.roleSessionName, webIdentityToken = init.webIdentityToken, providerId = init.providerId, policyArns = init.policyArns, policy = init.policy, durationSeconds = init.durationSeconds, roleAssumerWithWebIdentity = init.roleAssumerWithWebIdentity;
        if (!roleAssumerWithWebIdentity) {
            throw new ProviderError("Role Arn '" + roleArn + "' needs to be assumed with web identity," +
                " but no role assumption callback was provided.", false);
        }
        return roleAssumerWithWebIdentity({
            RoleArn: roleArn,
            RoleSessionName: roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : "aws-sdk-js-session-" + Date.now(),
            WebIdentityToken: webIdentityToken,
            ProviderId: providerId,
            PolicyArns: policyArns,
            Policy: policy,
            DurationSeconds: durationSeconds,
        });
    };
};
//# sourceMappingURL=data:application/json;base64,